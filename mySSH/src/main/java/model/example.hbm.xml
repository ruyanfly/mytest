<?xml version="1.0" encoding="UTF-8"?>
<!-- 如果文件中文太多,会导致出现字符不符合的错误,需要把UTF-8变成GBK -->
<!DOCTYPE hibernate-mapping PUBLIC 
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="hibernate.entities">
	<!--class元素表示对一个类做映射,name是类名,table是表名,符号``为了避免数据中的关键字,
		此处类名和表名一样时,table可不写
		mutable: 设置为false就是把所有的<property>元素的update属性设置为false,
			说明这个对象不会被更新,默认true
		dynamic-update: 设置为true,表示把所有的<property>元素的dynamic-update属性设置为true,
			默认false
		dynamic-insert: 设置为true,表示把所有<property>元素的dynamic-insert属性设置为true,
			默认false
		select-before-update: 默认为false,在修改之前先做一次查询,与用户的值进行对比,有变化都会真正更新
		optimistic-lock: 默认为version(检查version/timestamp字段),
			取值:all(检查全部字段)dirty(只检查修改过的字段)none(不使用乐观锁定),此参数主要用来处理并发,
			每条值都有固定且唯一的版本,版本为最新时才能执行操作 -->
	<class name="model.User" table="ruyanfly_user" dynamic-update="true">
		<!-- 首先是设置主键id 其中column是数据库表中的字段名,两者可以不一样,但需要先建立表字段名,
			否则会往表中以id,column插入两行数据,表中有4个字段-->
		<id name="userId" type="java.lang.Integer">
			<column name="id" not-null="true"/>
			<!-- generator属性有7种class分别是:
				1.identity-用于Mysql数据库,特点是递增,对于Mysql数据库使用递增序列时需要在建表时对
					主键指定为auto_increment属性
					<generator class="identity"/>
				2.sequence-用于Oracle数据库
					<generator class="sequence">
						<param name="sequence">序列名</param>
					</generator>
				3.native-跨数据库时使用,由底层方言产生.Default.sequence为hibernate_sequence
					使用native时hibernate默认会去查找oracle中的hibernate_sequence序列,如果
					oracle中没有该序列,连接oracle数据库时会报错
					<generator class="native"/>
				4.hilo-通过高低位合成id,先建表hi_value,再建列next_value.必须要有初始值
					<generator class="hilo">
						<param name="table">high_val</param>
						<param name="column">nextval</param>
						<param name="max_lo">5</param>
					</generator>
				5.sequencehilo-通过高低位合成id,建一个sequence序列,不用建表
					<generator class="hilo">
						<param name="sequence">high_val_seq</param>
						<param name="max_lo">5</param>
					</generator>
				6.assigned-用户自定义id
					<generator class="assigned"/>
				7.foreign-用于一对一关系共享主键时,两id值一样 
					<generator class="sequence"/> 
				下面是Generator子元素的一些内置生成器的快捷名字:
				1.increment: 用于为long, short或者int类型生成唯一标识,
					只有在没有其他进程往同一张表中插入数据时才能使用, 在集群下不要使用
				2.identity: 对DB2,MySQL,MS-SQL-Server,Sybase和HypersonicSQL的内置标识字段提供支持,
					返回的标识符是long,short或者int类型的
				3.sequence: 在DB2,PostgreSQL,Oracle,SAP-DB,McKoi中使用序列(sequence),
					而在Interbase中使用生成器(generator),返回的标识符是long,short或者 int类型的
				4.hilo: 使用一个高/低位算法来高效的生成long,short或者int类型的标识符,
					给定一个表和字段(默认分别是是hibernate_unique_key和next_hi)作为高位值得来源,
					高/低位算法生成的标识符只在一个特定的数据库中是唯一的,
					在使用JTA获得的连接或者用户自行提供的连接中,不要使用这种生成器
				5.seqhilo: 使用一个高/低位算法来高效的生成long,short或者 int类型的标识符,
					给定一个数据库序列(sequence)的名字
				6.uuid.hex: 用一个128-bit的UUID算法生成字符串类型的标识符,在一个网络中唯一(使用了IP地址),
					UUID被编码为一个32位16进制数字的字符串
				7.uuid.string: 使用同样的UUID算法,UUID被编码为一个16个字符长的任意ASCII字符组成的字符串,
					不能使用在PostgreSQL数据库中
				8.native: 根据底层数据库的能力选择identity,sequence或者hilo中的一个
				9.assigned: 让应用程序在save()之前为对象分配一个标示符
				10.foreign: 使用另外一个相关联的对象的标识符,和<one-to-one>联合一起使用  -->
			<generator class="increment"/>
		</id>
		<!-- property用来设置其他非主键属性,如果name与column相同可以不用写column
			update: 操作时是否包含本字段的数据 默认值为true,设置为false则执行update语句时会把这个字段忽略
			insert: 操作时是否包含本字段的数据 默认值为true,设置为false则执行insert语句时会把这个字段忽略
			formula: 定义一个SQL来计算这个属性的值
			access: Hibernate访问这个属性的策略,默认值为property
			unique: 设置该字段值是否唯一,默认值为false
			not-null: 设置该字段值是否可以为空,默认值为false
			property-ref: 设置关联类的属性名,此属性和本类的关联相对应,默认值为关联类的主键
			optimistic-lock: 指定此属性做更新操作时是否需要乐观锁定,默认值为true
			lazy: 指定是否采用延迟加载及加载策略,默认值为proxy通过代理进行关联可选值为 true,
				此对象采用延迟加载并在变量第一次被访问时抓取,false此关联对象不采用延迟加载
			not-found: 指定外键引用的数据不存在时如何让处理,默认值为exception产生异常,
				可选值为ignore对不存在的应用关联到null
			index: 指定一个字符串的索引名称,当系统需要hibernate自动创建表时,
				用于为该属性所映射的数据列创建唯一索引,从而加速基于该数据列的查询
			entity-name: 被关联类的实体名
			dynamic-insert: 设置为true,表示insert对象的时候,生成动态的insert语句,
				如果这个字段的值是null就不会加入到insert语句当中,默认false
			dynamic-update: 设置为true,表示update对象的时候,生成动态的update语句,
				如果这个字段的值是null就不会被加入到update语句中,默认false -->
		<property name="userName" type="string" column="name" update="false" index="" length="50">
		</property>
		<!--
		<property generated="never" lazy="false" name="userName" type="java.lang.String">
			<column length="50" name="name" not-null="false"/>
		</property>
		-->
	</class>
</hibernate-mapping>